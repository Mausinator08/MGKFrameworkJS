"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const component_manager_js_1 = require("./component-manager.js");
const electron_1 = require("electron");
var gameLoaded = false;
class GameCore {
    constructor(canvasElement, comPath, logic) {
        this.preInitFunc = null;
        this.quitting = false;
        this.exitting = false;
        this.createdComponents = [];
        this.exitCode = 0;
        this.isInitialized = false;
        this.reInit = true;
        this.gameLogic = logic;
        this._canvas = document.getElementById(canvasElement);
        this.comMan = new component_manager_js_1.ComponentManager(comPath);
    }
    static SetGameType(gameType) {
        GameCore.game = gameType;
    }
    get ReInit() {
        return this.reInit;
    }
    ReInitialize() {
        this.reInit = true;
        this.isInitialized = false;
    }
    VInit() {
        try {
            if (this.preInitFunc !== null) {
                let preState = true;
                if (this.reInit === true) {
                    preState = this.preInitFunc(this);
                }
                if (preState === true) {
                    this.comMan.Init();
                    if (!this.gameLogic.VInit()) {
                        return false;
                    }
                    if (this.reInit === true) {
                        this.reInit = false;
                        this.isInitialized = true;
                        this.VUpdate();
                    }
                }
                else {
                    this.reInit = false;
                    this.Quit();
                    return false;
                }
            }
            this.isInitialized = true;
            if (this.reInit === true) {
                this.reInit = false;
            }
            return true;
        }
        catch (err) {
            if (this.reInit === true) {
                this.isInitialized = false;
                this.reInit = false;
            }
            console.error("GameCore: VInit() -> ### ERROR:\n" + err);
            return false;
        }
    }
    VUpdate() {
        if (!this.quitting) {
            if (this.reInit === true) {
                return;
            }
            if (this.isInitialized === false) {
                return;
            }
            // Update components
            this.comMan.Update();
            this.gameLogic.VUpdate();
            // Get the current window and define how its events are handled.
            let _window = electron_1.remote.getCurrentWindow();
            _window.on("close", () => {
                this.Exit();
            });
        }
    }
    VShutdown() {
        this.gameLogic.VShutdown();
        this.comMan.Shutdown();
        if (this.quitting === true) {
            this.comMan.Clear();
            process.exit(this.exitCode);
        }
    }
    // Returns wether the program is terminating or still running
    Quitting() {
        return this.quitting;
    }
    // Tell engine to start shutting down and then terminate
    Quit() {
        this.quitting = true;
    }
    // Returns whether the user requested to exit
    Exitting() {
        return this.exitting;
    }
    // The user requested to exit
    Exit() {
        this.exitting = true;
    }
    // The user decided not to exit after initial exit request... (make up your mind!!!)
    CancelExit() {
        this.exitting = false;
    }
}
exports.GameCore = GameCore;
var loadGame;
function OnDOMContentLoaded(cbLoadGame) {
    loadGame = cbLoadGame;
}
exports.OnDOMContentLoaded = OnDOMContentLoaded;
window.addEventListener('DOMContentLoaded', () => {
    if (!gameLoaded) {
        loadGame();
        gameLoaded = true;
    }
});
//# sourceMappingURL=data:application/json;base64,