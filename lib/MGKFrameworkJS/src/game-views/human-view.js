"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const game_core_js_1 = require("./../game/game-core.js");
class HumanView {
    constructor(name) {
        this.name = "HumanView";
        this.type = "HumanView";
        this.autoUpdate = false;
        this.reInit = true;
        this.requestShutdown = false;
        this.rendererName = "";
        this.isInitialized = false;
        this.clearColor = {
            r: 0.0,
            g: 0.0,
            b: 0.0,
            a: 0.0
        };
        this.name = name;
    }
    VInit() {
        let renderer = game_core_js_1.GameCore.game.comMan.GetByName(this.rendererName);
        renderer.CreateScene(function (scene, canvas) {
            let defaultCamera = new BABYLON.FreeCamera("camera_default", new BABYLON.Vector3(0, 5, -10), scene);
            defaultCamera.setTarget(BABYLON.Vector3.Zero());
            defaultCamera.attachControl(canvas, true);
            return scene;
        });
        this.isInitialized = true;
        this.reInit = false;
        return true;
    }
    VUpdate() {
        if (game_core_js_1.GameCore.game.Quitting() === true) {
            this.requestShutdown = true;
        }
        if (this.isInitialized === false) {
            console.warn("HumanView: VUpdate() -> The human view [" + this.name + "] called update without being initialized!\n" +
                "Call the VInit() function and ensure it returns true before calling VUpdate().");
            return;
        }
        let renderer = game_core_js_1.GameCore.game.comMan.GetByName(this.rendererName);
        if (renderer.IsInitialized === false) {
            console.warn("HumanView: VUpdate() -> The human view has detected that the renderer is not initialized!");
            return;
        }
        // Grab and clear the background color to start the scene rendering.
        let cc = this.clearColor;
        renderer.BeginScene(cc.r, cc.g, cc.b, cc.a);
        // Render objects here:
        // End rendering objects...
        // Call this to end the rendering scene and present it to the screen.
        renderer.EndScene();
    }
    VShutdown() {
        if (this.requestShutdown === true) {
            this.isInitialized = false;
            this.requestShutdown = false;
        }
    }
    VIsInitialized() {
        return this.isInitialized;
    }
    VReInit() {
        this.reInit = true;
    }
    VIsReInit() {
        return this.reInit;
    }
    VShutdownRequested() {
        return this.requestShutdown;
    }
    VRequestShutdown() {
        this.requestShutdown = true;
    }
    SetBackgroundColor(r, g, b, a) {
        this.clearColor.r = r;
        this.clearColor.g = g;
        this.clearColor.b = b;
        this.clearColor.a = a;
    }
    SetRendererName(name) {
        this.rendererName = name;
    }
}
exports.HumanView = HumanView;
function Create(name) {
    return new HumanView(name);
}
exports.Create = Create;
//# sourceMappingURL=data:application/json;base64,