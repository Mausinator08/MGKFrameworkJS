"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Create = exports.Renderer = void 0;
const BABYLON = require("babylonjs");
const component_js_1 = require("./../game/component.js");
const babylonjs_1 = require("babylonjs");
const game_core_js_1 = require("./../game/game-core.js");
// BabylonJS renderer - this needs to be created and initialized after all other dependent components.
class Renderer extends component_js_1.Component {
    constructor(name) {
        super(name, "renderer");
        this.runLoop = false;
    }
    SetGameCore(game) {
        this.gameCore = game;
    }
    SetCanvas(canvas) {
        this._canvas = canvas;
    }
    CreateScene(cbLoadScene) {
        // This creates a basic Babylon Scene object (non-mesh)
        const scene = new BABYLON.Scene(this._engine);
        this._scene = scene;
        this._scene = cbLoadScene(scene, this._canvas);
    }
    BeginScene(r, g, b, a) {
        this._scene.clearColor = new babylonjs_1.Color4(r, g, b, a);
    }
    EndScene() {
        this._scene.render(false);
    }
    VInit() {
        const engine = new BABYLON.Engine(this._canvas, true);
        this._engine = engine;
        window.addEventListener('resize', function () {
            engine.resize();
        });
        this.isInitialized = true;
        return super.VInit();
    }
    VUpdate() {
        if (game_core_js_1.GameCore.game.Quitting() === true) {
            this.requestShutdown = true;
        }
        if (this.isInitialized) {
            if (this.runLoop) {
                this._engine.runRenderLoop(() => {
                    if (this.gameCore.VInit() === true) {
                        this.gameCore.VUpdate();
                    }
                    this.gameCore.VShutdown();
                });
                this.runLoop = false;
            }
        }
        super.VUpdate();
    }
    VShutdown() {
        super.VShutdown();
        this.runLoop = false;
    }
    StartRendering() {
        this.runLoop = true;
    }
    StopRendering() {
        this._engine.stopRenderLoop();
    }
}
exports.Renderer = Renderer;
;
function Create(name) {
    return new Renderer(name);
}
exports.Create = Create;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyZXIuanMiLCJzb3VyY2VSb290IjoiLi8uLi8iLCJzb3VyY2VzIjpbIk1HS0ZyYW1ld29ya0pTL3NyYy9jb21wb25lbnRzL3JlbmRlcmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHFDQUFxQztBQUNyQyx5REFBbUQ7QUFDbkQseUNBQW1DO0FBQ25DLHlEQUFrRDtBQUVsRCxzR0FBc0c7QUFDdEcsTUFBYSxRQUFTLFNBQVEsd0JBQVM7SUFPbkMsWUFBWSxJQUFZO1FBQ3BCLEtBQUssQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFIcEIsWUFBTyxHQUFZLEtBQUssQ0FBQztJQUlqQyxDQUFDO0lBRU0sV0FBVyxDQUFDLElBQWM7UUFDN0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7SUFDekIsQ0FBQztJQUVNLFNBQVMsQ0FBQyxNQUF5QjtRQUN0QyxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztJQUMxQixDQUFDO0lBRU0sV0FBVyxDQUFDLFdBQXFCO1FBQ3BDLHVEQUF1RDtRQUN2RCxNQUFNLEtBQUssR0FBRyxJQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzlDLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBRXBCLElBQUksQ0FBQyxNQUFNLEdBQUcsV0FBVyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVNLFVBQVUsQ0FBQyxDQUFTLEVBQUUsQ0FBUyxFQUFFLENBQVMsRUFBRSxDQUFTO1FBQ3hELElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxHQUFHLElBQUksa0JBQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRU0sUUFBUTtRQUNYLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFFTSxLQUFLO1FBQ1IsTUFBTSxNQUFNLEdBQUcsSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDdEQsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFFdEIsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRTtZQUM5QixNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDcEIsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQztRQUMxQixPQUFPLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBRU0sT0FBTztRQUNWLElBQUksdUJBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ25DLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO1NBQy9CO1FBRUQsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ3BCLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtnQkFDZCxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUU7b0JBQzVCLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsS0FBSyxJQUFJLEVBQUU7d0JBQ2hDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUM7cUJBQzNCO29CQUVELElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFLENBQUM7Z0JBQzlCLENBQUMsQ0FBQyxDQUFDO2dCQUNILElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO2FBQ3hCO1NBQ0o7UUFDRCxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDcEIsQ0FBQztJQUVNLFNBQVM7UUFDWixLQUFLLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDbEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7SUFDekIsQ0FBQztJQUVNLGNBQWM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7SUFDeEIsQ0FBQztJQUVNLGFBQWE7UUFDaEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUNsQyxDQUFDO0NBQ0o7QUEvRUQsNEJBK0VDO0FBQUEsQ0FBQztBQUVGLFNBQWdCLE1BQU0sQ0FBQyxJQUFZO0lBQy9CLE9BQU8sSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDOUIsQ0FBQztBQUZELHdCQUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgQkFCWUxPTiBmcm9tICdiYWJ5bG9uanMnO1xyXG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICcuLy4uL2dhbWUvY29tcG9uZW50LmpzJztcclxuaW1wb3J0IHsgQ29sb3I0IH0gZnJvbSAnYmFieWxvbmpzJztcclxuaW1wb3J0IHsgR2FtZUNvcmUgfSBmcm9tICcuLy4uL2dhbWUvZ2FtZS1jb3JlLmpzJztcclxuXHJcbi8vIEJhYnlsb25KUyByZW5kZXJlciAtIHRoaXMgbmVlZHMgdG8gYmUgY3JlYXRlZCBhbmQgaW5pdGlhbGl6ZWQgYWZ0ZXIgYWxsIG90aGVyIGRlcGVuZGVudCBjb21wb25lbnRzLlxyXG5leHBvcnQgY2xhc3MgUmVuZGVyZXIgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgcHJpdmF0ZSBfY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudDtcclxuICAgIHByaXZhdGUgX2VuZ2luZTogQkFCWUxPTi5FbmdpbmU7XHJcbiAgICBwcml2YXRlIF9zY2VuZTogQkFCWUxPTi5TY2VuZTtcclxuICAgIHByaXZhdGUgZ2FtZUNvcmU6IEdhbWVDb3JlO1xyXG4gICAgcHJpdmF0ZSBydW5Mb29wOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgY29uc3RydWN0b3IobmFtZTogc3RyaW5nKSB7XHJcbiAgICAgICAgc3VwZXIobmFtZSwgXCJyZW5kZXJlclwiKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgU2V0R2FtZUNvcmUoZ2FtZTogR2FtZUNvcmUpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmdhbWVDb3JlID0gZ2FtZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgU2V0Q2FudmFzKGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9jYW52YXMgPSBjYW52YXM7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIENyZWF0ZVNjZW5lKGNiTG9hZFNjZW5lOiBGdW5jdGlvbik6IHZvaWQge1xyXG4gICAgICAgIC8vIFRoaXMgY3JlYXRlcyBhIGJhc2ljIEJhYnlsb24gU2NlbmUgb2JqZWN0IChub24tbWVzaClcclxuICAgICAgICBjb25zdCBzY2VuZSA9IG5ldyBCQUJZTE9OLlNjZW5lKHRoaXMuX2VuZ2luZSk7XHJcbiAgICAgICAgdGhpcy5fc2NlbmUgPSBzY2VuZTtcclxuXHJcbiAgICAgICAgdGhpcy5fc2NlbmUgPSBjYkxvYWRTY2VuZShzY2VuZSwgdGhpcy5fY2FudmFzKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgQmVnaW5TY2VuZShyOiBudW1iZXIsIGc6IG51bWJlciwgYjogbnVtYmVyLCBhOiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9zY2VuZS5jbGVhckNvbG9yID0gbmV3IENvbG9yNChyLCBnLCBiLCBhKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgRW5kU2NlbmUoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fc2NlbmUucmVuZGVyKGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgVkluaXQoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgY29uc3QgZW5naW5lID0gbmV3IEJBQllMT04uRW5naW5lKHRoaXMuX2NhbnZhcywgdHJ1ZSk7XHJcbiAgICAgICAgdGhpcy5fZW5naW5lID0gZW5naW5lO1xyXG5cclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBlbmdpbmUucmVzaXplKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuaXNJbml0aWFsaXplZCA9IHRydWU7XHJcbiAgICAgICAgcmV0dXJuIHN1cGVyLlZJbml0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIFZVcGRhdGUoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKEdhbWVDb3JlLmdhbWUuUXVpdHRpbmcoKSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLnJlcXVlc3RTaHV0ZG93biA9IHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5pc0luaXRpYWxpemVkKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnJ1bkxvb3ApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2VuZ2luZS5ydW5SZW5kZXJMb29wKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5nYW1lQ29yZS5WSW5pdCgpID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2FtZUNvcmUuVlVwZGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lQ29yZS5WU2h1dGRvd24oKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ydW5Mb29wID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgc3VwZXIuVlVwZGF0ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBWU2h1dGRvd24oKTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIuVlNodXRkb3duKCk7XHJcbiAgICAgICAgdGhpcy5ydW5Mb29wID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIFN0YXJ0UmVuZGVyaW5nKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMucnVuTG9vcCA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIFN0b3BSZW5kZXJpbmcoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fZW5naW5lLnN0b3BSZW5kZXJMb29wKCk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gQ3JlYXRlKG5hbWU6IHN0cmluZyk6IFJlbmRlcmVyIHtcclxuICAgIHJldHVybiBuZXcgUmVuZGVyZXIobmFtZSk7XHJcbn1cclxuIl19