"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BABYLON = require("babylonjs");
const component_js_1 = require("./../game/component.js");
const babylonjs_1 = require("babylonjs");
const game_core_js_1 = require("./../game/game-core.js");
// BabylonJS renderer - this needs to be created and initialized after all other dependent components.
class Renderer extends component_js_1.Component {
    constructor(name) {
        super(name, "renderer");
        this.runLoop = false;
    }
    SetGameCore(game) {
        this.gameCore = game;
    }
    SetCanvas(canvas) {
        this._canvas = canvas;
    }
    CreateScene(cbLoadScene) {
        // This creates a basic Babylon Scene object (non-mesh)
        const scene = new BABYLON.Scene(this._engine);
        this._scene = scene;
        this._scene = cbLoadScene(scene, this._canvas);
    }
    BeginScene(r, g, b, a) {
        this._scene.clearColor = new babylonjs_1.Color4(r, g, b, a);
    }
    EndScene() {
        this._scene.render(false);
    }
    VInit() {
        const engine = new BABYLON.Engine(this._canvas, true);
        this._engine = engine;
        window.addEventListener('resize', function () {
            engine.resize();
        });
        this.isInitialized = true;
        return super.VInit();
    }
    VUpdate() {
        if (game_core_js_1.GameCore.game.Quitting() === true) {
            this.requestShutdown = true;
        }
        if (this.isInitialized) {
            if (this.runLoop) {
                this._engine.runRenderLoop(() => {
                    if (this.gameCore.VInit() === true) {
                        this.gameCore.VUpdate();
                    }
                    this.gameCore.VShutdown();
                });
                this.runLoop = false;
            }
        }
        super.VUpdate();
    }
    VShutdown() {
        super.VShutdown();
        this.runLoop = false;
    }
    StartRendering() {
        this.runLoop = true;
    }
    StopRendering() {
        this._engine.stopRenderLoop();
    }
}
exports.Renderer = Renderer;
;
function Create(name) {
    return new Renderer(name);
}
exports.Create = Create;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyZXIuanMiLCJzb3VyY2VSb290IjoiLi8uLi8iLCJzb3VyY2VzIjpbIk1HS0ZyYW1ld29ya0pTL3NyYy9jb21wb25lbnRzL3JlbmRlcmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEscUNBQXFDO0FBQ3JDLHlEQUFtRDtBQUNuRCx5Q0FBbUM7QUFDbkMseURBQWtEO0FBRWxELHNHQUFzRztBQUN0RyxNQUFhLFFBQVMsU0FBUSx3QkFBUztJQU9uQyxZQUFZLElBQVk7UUFDcEIsS0FBSyxDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQztRQUhwQixZQUFPLEdBQVksS0FBSyxDQUFDO0lBSWpDLENBQUM7SUFFTSxXQUFXLENBQUMsSUFBYztRQUM3QixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztJQUN6QixDQUFDO0lBRU0sU0FBUyxDQUFDLE1BQXlCO1FBQ3RDLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO0lBQzFCLENBQUM7SUFFTSxXQUFXLENBQUMsV0FBcUI7UUFDcEMsdURBQXVEO1FBQ3ZELE1BQU0sS0FBSyxHQUFHLElBQUksT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDOUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFFcEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxXQUFXLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRU0sVUFBVSxDQUFDLENBQVMsRUFBRSxDQUFTLEVBQUUsQ0FBUyxFQUFFLENBQVM7UUFDeEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEdBQUcsSUFBSSxrQkFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFFTSxRQUFRO1FBQ1gsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVNLEtBQUs7UUFDUixNQUFNLE1BQU0sR0FBRyxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN0RCxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUV0QixNQUFNLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFO1lBQzlCLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNwQixDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO1FBQzFCLE9BQU8sS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFFTSxPQUFPO1FBQ1YsSUFBSSx1QkFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDbkMsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7U0FDL0I7UUFFRCxJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDcEIsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO2dCQUNkLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLEdBQUcsRUFBRTtvQkFDNUIsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxLQUFLLElBQUksRUFBRTt3QkFDaEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztxQkFDM0I7b0JBRUQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsQ0FBQztnQkFDOUIsQ0FBQyxDQUFDLENBQUM7Z0JBQ0gsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7YUFDeEI7U0FDSjtRQUNELEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBRU0sU0FBUztRQUNaLEtBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNsQixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztJQUN6QixDQUFDO0lBRU0sY0FBYztRQUNqQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztJQUN4QixDQUFDO0lBRU0sYUFBYTtRQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ2xDLENBQUM7Q0FDSjtBQS9FRCw0QkErRUM7QUFBQSxDQUFDO0FBRUYsU0FBZ0IsTUFBTSxDQUFDLElBQVk7SUFDL0IsT0FBTyxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM5QixDQUFDO0FBRkQsd0JBRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBCQUJZTE9OIGZyb20gJ2JhYnlsb25qcyc7XHJcbmltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJy4vLi4vZ2FtZS9jb21wb25lbnQuanMnO1xyXG5pbXBvcnQgeyBDb2xvcjQgfSBmcm9tICdiYWJ5bG9uanMnO1xyXG5pbXBvcnQgeyBHYW1lQ29yZSB9IGZyb20gJy4vLi4vZ2FtZS9nYW1lLWNvcmUuanMnO1xyXG5cclxuLy8gQmFieWxvbkpTIHJlbmRlcmVyIC0gdGhpcyBuZWVkcyB0byBiZSBjcmVhdGVkIGFuZCBpbml0aWFsaXplZCBhZnRlciBhbGwgb3RoZXIgZGVwZW5kZW50IGNvbXBvbmVudHMuXHJcbmV4cG9ydCBjbGFzcyBSZW5kZXJlciBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBwcml2YXRlIF9jYW52YXM6IEhUTUxDYW52YXNFbGVtZW50O1xyXG4gICAgcHJpdmF0ZSBfZW5naW5lOiBCQUJZTE9OLkVuZ2luZTtcclxuICAgIHByaXZhdGUgX3NjZW5lOiBCQUJZTE9OLlNjZW5lO1xyXG4gICAgcHJpdmF0ZSBnYW1lQ29yZTogR2FtZUNvcmU7XHJcbiAgICBwcml2YXRlIHJ1bkxvb3A6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcpIHtcclxuICAgICAgICBzdXBlcihuYW1lLCBcInJlbmRlcmVyXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBTZXRHYW1lQ29yZShnYW1lOiBHYW1lQ29yZSk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZ2FtZUNvcmUgPSBnYW1lO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBTZXRDYW52YXMoY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX2NhbnZhcyA9IGNhbnZhcztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgQ3JlYXRlU2NlbmUoY2JMb2FkU2NlbmU6IEZ1bmN0aW9uKTogdm9pZCB7XHJcbiAgICAgICAgLy8gVGhpcyBjcmVhdGVzIGEgYmFzaWMgQmFieWxvbiBTY2VuZSBvYmplY3QgKG5vbi1tZXNoKVxyXG4gICAgICAgIGNvbnN0IHNjZW5lID0gbmV3IEJBQllMT04uU2NlbmUodGhpcy5fZW5naW5lKTtcclxuICAgICAgICB0aGlzLl9zY2VuZSA9IHNjZW5lO1xyXG5cclxuICAgICAgICB0aGlzLl9zY2VuZSA9IGNiTG9hZFNjZW5lKHNjZW5lLCB0aGlzLl9jYW52YXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBCZWdpblNjZW5lKHI6IG51bWJlciwgZzogbnVtYmVyLCBiOiBudW1iZXIsIGE6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX3NjZW5lLmNsZWFyQ29sb3IgPSBuZXcgQ29sb3I0KHIsIGcsIGIsIGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBFbmRTY2VuZSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9zY2VuZS5yZW5kZXIoZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBWSW5pdCgpOiBib29sZWFuIHtcclxuICAgICAgICBjb25zdCBlbmdpbmUgPSBuZXcgQkFCWUxPTi5FbmdpbmUodGhpcy5fY2FudmFzLCB0cnVlKTtcclxuICAgICAgICB0aGlzLl9lbmdpbmUgPSBlbmdpbmU7XHJcblxyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGVuZ2luZS5yZXNpemUoKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5pc0luaXRpYWxpemVkID0gdHJ1ZTtcclxuICAgICAgICByZXR1cm4gc3VwZXIuVkluaXQoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgVlVwZGF0ZSgpOiB2b2lkIHtcclxuICAgICAgICBpZiAoR2FtZUNvcmUuZ2FtZS5RdWl0dGluZygpID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVxdWVzdFNodXRkb3duID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmlzSW5pdGlhbGl6ZWQpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMucnVuTG9vcCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZW5naW5lLnJ1blJlbmRlckxvb3AoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmdhbWVDb3JlLlZJbml0KCkgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lQ29yZS5WVXBkYXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWVDb3JlLlZTaHV0ZG93bigpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJ1bkxvb3AgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBzdXBlci5WVXBkYXRlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIFZTaHV0ZG93bigpOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5WU2h1dGRvd24oKTtcclxuICAgICAgICB0aGlzLnJ1bkxvb3AgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgU3RhcnRSZW5kZXJpbmcoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5ydW5Mb29wID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgU3RvcFJlbmRlcmluZygpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9lbmdpbmUuc3RvcFJlbmRlckxvb3AoKTtcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBDcmVhdGUobmFtZTogc3RyaW5nKTogUmVuZGVyZXIge1xyXG4gICAgcmV0dXJuIG5ldyBSZW5kZXJlcihuYW1lKTtcclxufVxyXG4iXX0=